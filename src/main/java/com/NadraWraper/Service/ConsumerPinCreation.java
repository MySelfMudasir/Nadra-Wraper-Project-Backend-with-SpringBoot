package com.NadraWraper.Service;

import com.NadraWraper.Model.entity.UserRegistration;
import com.NadraWraper.Repository.UserRegistrationRepository;
import com.NadraWraper.Utility.AESEncryption;
import com.NadraWraper.Utility.AESKeyProvider;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.security.SecureRandom;
import java.util.List;
import java.util.Optional;

@Service
public class ConsumerPinCreation {
    @Autowired
    private UserRegistrationRepository userRegistrationRepository;
    @Autowired
    private AESEncryption aesEncryption;
    @Autowired
    private AESKeyProvider aesKeyProvider;

    public String generatePin(int length) {
        SecureRandom random = new SecureRandom();
        StringBuilder pin = new StringBuilder();

        for (int i = 0; i < length; i++) {
            pin.append(random.nextInt(10)); // 0â€“9 digits
        }
        return pin.toString();
    }

    @Transactional
    public String saveAutoGeneratedPin(String cnic) {
        String generatedPin = generatePin(6);

        try {
            String encryptedPin = aesEncryption.encrypt(
                    generatedPin,
                    aesKeyProvider.getSecretKey(),
                    aesKeyProvider.getIv()
            );

            userRegistrationRepository.updateAllPinsByCnic(encryptedPin, cnic);

            return "PIN updated successfully for CNIC: " + cnic + ". Generated PIN: " + generatedPin;
        } catch (Exception e) {
            e.printStackTrace();
            return "Failed to update PIN: " + e.getMessage();
        }
    }



    public String getPin(String cnic) {
        try {
            String encryptedPin = userRegistrationRepository.findPinByCnic(cnic.toUpperCase());

            if (encryptedPin == null || encryptedPin.isEmpty()) {
                return "PIN is not set for this user or user not found.";
            }

            String decryptedPin = aesEncryption.decrypt(
                    encryptedPin,
                    aesKeyProvider.getSecretKey(),
                    aesKeyProvider.getIv()
            );

            // Return confirmation message (don't expose the PIN)
            return "PIN decrypted successfully. (Internal use only: " + decryptedPin + ")";

        } catch (Exception e) {
            e.printStackTrace(); // or use proper logging
            return "Error occurred while decrypting PIN: " + e.getMessage();
        }
    }


}
